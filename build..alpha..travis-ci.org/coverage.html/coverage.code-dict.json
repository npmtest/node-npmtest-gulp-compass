{"/home/travis/build/npmtest/node-npmtest-gulp-compass/test.js":"/* istanbul instrument in package npmtest_gulp_compass */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-compass/lib.npmtest_gulp_compass.js":"/* istanbul instrument in package npmtest_gulp_compass */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_compass = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_compass = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-compass/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-compass && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_compass */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_compass\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_compass.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_compass.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_compass.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_compass.__dirname +\n                    '/lib.npmtest_gulp_compass.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-compass/node_modules/gulp-compass/lib/index.js":"'use strict';\n\nvar fs = require('fs');\nvar compass = require('./compass');\nvar callCounter = require('./callCounter');\nvar through = require('through2');\nvar gutil = require('gulp-util');\nvar path = require('path');\n\n// Consts\nvar PLUGIN_NAME = 'gulp-compass';\n\nmodule.exports = function(opt) {\n  var files = [];\n\n  var collectNames = function(file, enc, cb) {\n    if (file.isNull()) {\n      return cb(null, file);\n    }\n\n    if (file.isStream()) {\n      return cb(new gutil.PluginError(PLUGIN_NAME, 'Streaming not supported'));\n    }\n\n    if (path.basename(file.path)[0] !== '_') {\n      files.push(file);\n    }\n\n    return cb();\n  };\n\n  var readFileAndPush = function(pathToCss, outputStream, cb) {\n    // Read each generated file so it can continue being streamed.\n    fs.readFile(pathToCss, function(err, contents) {\n      if (err) {\n        return cb(new gutil.PluginError(PLUGIN_NAME, 'Failure reading in the CSS output file'));\n      }\n\n      // Fix garbled output.\n      if (!(contents instanceof Buffer)) {\n        contents = new Buffer(contents);\n      }\n\n      outputStream.push(new gutil.File({\n        base: opt.css,\n        path: pathToCss,\n        contents: contents\n      }));\n\n      cb();\n    });\n  };\n\n  var compile = function(cb) {\n    var _this = this;\n    var fileNames = files.map(function(f) {\n      return f.path;\n    });\n\n    compass(fileNames, opt, function(code, stdout, stderr, pathsToCss, options) {\n      if (code === 127) {\n        return cb(new gutil.PluginError(PLUGIN_NAME, 'You need to have Ruby and Compass installed ' +\n          'and in your system PATH for this task to work.'));\n      }\n\n      // support error callback\n      if (code !== 0) {\n        return cb(new gutil.PluginError(PLUGIN_NAME, stdout || 'Compass failed'));\n      }\n\n      cb = callCounter(files.length, cb);\n      pathsToCss.forEach(function(f) {\n        readFileAndPush(f, _this, cb);\n      });\n    });\n  };\n\n  return through.obj(collectNames, compile);\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-compass/node_modules/gulp-compass/lib/compass.js":"'use strict';\n\nvar PLUGIN_NAME = 'gulp-compass';\nvar path = require('path');\nvar spawn = require('child_process').spawn;\nvar gutil = require('gulp-util');\nvar path = require('path');\nvar helpers = require('./helpers');\nvar defaults = {\n  style: false,\n  comments: false,\n  relative: true,\n  css: 'css',\n  sass: 'sass',\n  image: false,\n  generated_images_path: false,\n  http_path: false,\n  javascript: false,\n  font: false,\n  import_path: false,\n  config_file: false,\n  require: false,\n  logging: true,\n  load_all: false,\n  project: process.cwd(),\n  bundle_exec: false,\n  debug: false,\n  time: false,\n  sourcemap: false,\n  boring: false,\n  force: false,\n  task: 'compile'\n};\n\nmodule.exports = function(files, opts, callback) {\n  if ('string' === typeof files) {\n    files = [files];\n  }\n\n  opts = opts || {};\n\n  var filePaths = [],\n      pathsToCss = [];\n\n  for (var key in defaults) {\n    if (opts[key] === undefined) {\n      opts[key] = defaults[key];\n    }\n  }\n\n  files.forEach(function(file) {\n    file = file.replace(/\\\\/g, '/');\n    var relPathToSass = path.relative(path.resolve(opts.project, opts.sass), file);\n    pathsToCss.push(path.resolve(opts.project, opts.css, gutil.replaceExtension(relPathToSass, '.css')));\n    filePaths.push(file);\n  });\n\n  var compassExecutable = 'compass';\n\n  // check command exist\n  if (opts.bundle_exec) {\n    compassExecutable = helpers.command('bundle', callback);\n  } else {\n    compassExecutable = helpers.command(compassExecutable, callback);\n  }\n\n  if (!compassExecutable) {\n    return false;\n  }\n\n  var options = [];\n  if (opts.bundle_exec) {\n    options.push('exec', 'compass');\n  }\n\n  options.push(opts.task);\n  if (process.platform === 'win32') {\n    options.push(opts.project.replace(/\\\\/g, '/'));\n  } else {\n    options.push(opts.project);\n  }\n\n  if (opts.task !== 'watch') {\n    filePaths.forEach(function(file) {\n      options.push(file);\n    });\n  }\n\n  // set compass setting\n  if (opts.environment) { options.push('--environment', opts.environment); }\n\n  if (opts.config_file) { options.push('-c', opts.config_file); }\n\n  if (!opts.comments) { options.push('--no-line-comments'); }\n\n  if (opts.relative) { options.push('--relative-assets'); }\n\n  if (opts.debug) { options.push('--debug-info'); }\n\n  if (opts.time) { options.push('--time'); }\n\n  if (opts.boring) { options.push('--boring'); }\n\n  if (opts.sourcemap) { options.push('--sourcemap'); }\n\n  if (opts.font) { options.push('--fonts-dir', opts.font); }\n\n  if (opts.style) { options.push('--output-style', opts.style); }\n\n  if (opts.image) { options.push('--images-dir', opts.image); }\n\n  if (opts.generated_images_path) { options.push('--generated-images-path', opts.generated_images_path); }\n\n  if (opts.http_path) { options.push('--http-path', opts.http_path); }\n\n  if (opts.javascript) { options.push('--javascripts-dir', opts.javascript); }\n\n  if (opts.force) { options.push('--force'); }\n\n  options.push('--css-dir', path.normalize(opts.css));\n  options.push('--sass-dir', path.normalize(opts.sass));\n\n  if (opts.import_path) {\n    if (helpers.isArray(opts.import_path)) {\n      opts.import_path.forEach(function(i) {\n        options.push('-I', i);\n      });\n    } else {\n      options.push('-I', opts.import_path);\n    }\n  }\n\n  if (opts.load_all) { options.push('--load-all', opts.load_all); }\n\n  if (opts.require) {\n    if (helpers.isArray(opts.require)) {\n      opts.require.forEach(function(f) {\n        options.push('--require', f);\n      });\n    } else {\n      options.push('--require', opts.require);\n    }\n  }\n\n  if (opts.debug) {\n    gutil.log(PLUGIN_NAME + ':', 'Running command:', compassExecutable, options.join(' '));\n  }\n\n  var child = spawn(compassExecutable, options, {cwd: opts.project || process.cwd()});\n  var stdout = '';\n  var stderr = '';\n\n  if (opts.logging) {\n    child.stdout.setEncoding('utf8');\n    child.stdout.on('data', function(data) {\n      stdout += data;\n      console.log(data);\n    });\n\n    child.stderr.setEncoding('utf8');\n    child.stderr.on('data', function(data) {\n      stderr += data;\n      if (!data.match(/^\\u001b\\[\\d+m$/)) {\n        gutil.log(data);\n      }\n    });\n  }\n\n  // support callback\n  child.on('close', function(code) {\n    if (callback) {\n      callback(code, stdout, stderr, pathsToCss, opts);\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-compass/node_modules/gulp-compass/lib/helpers.js":"'use strict';\n\nvar which = require('which').sync;\n\nmodule.exports.isArray = function(obj) {\n  return Object.prototype.toString.call(obj) === '[object Array]';\n};\n\nmodule.exports.command = function(cmd, callback) {\n  var command;\n\n  try {\n    command = which(cmd);\n  } catch (err) {\n\n    if (callback) {\n      callback(127, '', String(err), '');\n    }\n\n    return false;\n  }\n\n  return command;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-compass/node_modules/gulp-compass/lib/callCounter.js":"'use strict';\n\nmodule.exports = function(pendingResponses, cb) {\n  var fire = function() {\n    cb();\n    cb = function() {};\n  };\n\n  if (pendingResponses < 1) {\n    fire();\n  }\n\n  return function() {\n    if (--pendingResponses <= 0) {\n      fire();\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-compass/node_modules/gulp-compass/gulpfile.js":"'use strict';\n\nvar gulp = require('gulp');\nvar $ = require('gulp-load-plugins')();\nvar del = require('del');\nvar lib = ['**/*.js', '!test/**/*', '!node_modules/**/*', '!coverage/**/*'];\n\nfunction mochaStream() {\n  return gulp.src('test/*_test.js', {read: false})\n    .pipe($.mocha({\n      reporter: 'spec'\n    }));\n}\n\ngulp.task('coverage', ['clean'], function() {\n  return gulp.src(lib)\n    .pipe($.istanbul())\n    .pipe($.istanbul.hookRequire());\n});\n\ngulp.task('jscs', function() {\n  return gulp.src(lib)\n    .pipe($.jscs());\n});\n\ngulp.task('jshint', function() {\n  return gulp.src(lib)\n    .pipe($.jshint())\n    .pipe($.jshint.reporter('jshint-reporter-jscs'))\n    .pipe($.jshint.reporter('fail'));\n});\n\ngulp.task('mocha', ['coverage'], function() {\n  return mochaStream()\n    .pipe($.istanbul.writeReports());\n});\n\ngulp.task('mocha:nocov', function() {\n  return mochaStream();\n});\n\ngulp.task('clean', del.bind(null, ['test/css', 'coverage/**/*']));\n\ngulp.task('default', ['mocha', 'jshint']);\n"}